from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging

from .config.settings import settings
from .logging_config import setup_logging
from .models import NormalizeRequest, NormalizeResponse, HealthResponse
from .services import OllamaClient, JobNormalizer, HealthChecker
from .prompts import PromptManager
from .cache import MemoryCache
from .exceptions import AIServiceError

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
cache = MemoryCache(ttl_seconds=3600)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
ollama_client = OllamaClient()
prompt_template = PromptManager.get_prompt("v1")
job_normalizer = JobNormalizer(ollama_client, prompt_template)
health_checker = HealthChecker(ollama_client)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting AI Job Normalization Service")
    logger.info(f"üìö Swagger UI: http://localhost:{settings.app_port}/docs")
    logger.info(f"üìñ ReDoc: http://localhost:{settings.app_port}/redoc")
    logger.info(f"üîó OpenAPI JSON: http://localhost:{settings.app_port}/openapi.json")
    yield
    logger.info("Shutting down AI Job Normalization Service")


app = FastAPI(
    title="AI Job Normalization Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–º–æ—â—å—é Ollama",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    openapi_tags=[
        {
            "name": "Health",
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"
        },
        {
            "name": "Job Normalization", 
            "description": "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–º–æ—â—å—é AI"
        },
        {
            "name": "Cache",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º"
        },
        {
            "name": "Info",
            "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"
        }
    ]
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get(
    "/health", 
    response_model=HealthResponse,
    tags=["Health"],
    summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞",
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∏ Ollama –º–æ–¥–µ–ª–∏",
    responses={
        200: {
            "description": "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞",
            "content": {
                "application/json": {
                    "example": {
                        "status": "healthy",
                        "ollama_available": True,
                        "model_loaded": True
                    }
                }
            }
        }
    }
)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        health_status = await health_checker.check_health()
        return HealthResponse(
            status="healthy" if health_status['ollama_available'] else "unhealthy",
            ollama_available=health_status['ollama_available'],
            model_loaded=health_status['model_loaded']
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return HealthResponse(
            status="unhealthy",
            ollama_available=False,
            model_loaded=False
        )


@app.post(
    "/api/v1/normalize", 
    response_model=NormalizeResponse,
    tags=["Job Normalization"],
    summary="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏",
    description="–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é AI –º–æ–¥–µ–ª–∏",
    responses={
        200: {
            "description": "–£—Å–ø–µ—à–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è",
            "content": {
                "application/json": {
                    "example": {
                        "id": "job_123456",
                        "title": "Senior Python Developer",
                        "short_description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                        "company": {
                            "name": "Tech Company",
                            "description": "IT –∫–æ–º–ø–∞–Ω–∏—è",
                            "website": "https://techcompany.com"
                        },
                        "work_type": "full_time",
                        "experience_level": "senior",
                        "quality_score": 85
                    }
                }
            }
        },
        500: {
            "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "content": {
                "application/json": {
                    "example": {"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
                }
            }
        }
    }
)
async def normalize_job(request: NormalizeRequest):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = cache.get(request.title, request.description)
        if cached_result:
            logger.info(f"Returning cached result for job: {request.title}")
            return cached_result
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
        result = await job_normalizer.normalize_job(
            title=request.title,
            description=request.description,
            source_name=request.source_name,
            original_url=request.original_url
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache.set(request.title, request.description, result)
        
        return result
        
    except AIServiceError as e:
        logger.error(f"AI service error: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get(
    "/",
    tags=["Info"],
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö"
)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "AI Job Normalization Service",
        "version": "1.0.0",
        "endpoints": {
            "health": "/health",
            "normalize": "/api/v1/normalize"
        },
        "prompt_versions": PromptManager.get_available_versions()
    }


@app.get(
    "/api/v1/cache/stats",
    tags=["Cache"],
    summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞",
    responses={
        200: {
            "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞",
            "content": {
                "application/json": {
                    "example": {
                        "cache_size": 150,
                        "ttl_seconds": 3600
                    }
                }
            }
        }
    }
)
async def cache_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
    return {
        "cache_size": len(cache.cache),
        "ttl_seconds": cache.ttl_seconds
    }


@app.post(
    "/api/v1/cache/clear",
    tags=["Cache"],
    summary="–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
    description="–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à —Å–µ—Ä–≤–∏—Å–∞",
    responses={
        200: {
            "description": "–ö—ç—à –æ—á–∏—â–µ–Ω",
            "content": {
                "application/json": {
                    "example": {"message": "Cache cleared successfully"}
                }
            }
        }
    }
)
async def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    cache.clear()
    return {"message": "Cache cleared successfully"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app, 
        host=settings.app_host, 
        port=settings.app_port,
        log_level=settings.log_level.lower()
    )
