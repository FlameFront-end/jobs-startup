name: jobs-startup-dev

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    environment:
      POSTGRES_DB: job_parser
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jobs_network
    restart: unless-stopped
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    volumes:
      - redis_data:/data
    networks:
      - jobs_network
    restart: unless-stopped

  # AI Service (dev with hot reload)
  ai-service:
    build: ./ai-service
    image: ai-service:dev
    container_name: ai-service-dev
    env_file:
      - ./ai-service/.env
    ports:
      - "8001:8001"
    volumes:
      - ./ai-service:/app
    networks:
      - jobs_network
    restart: unless-stopped
    depends_on:
      - redis
    command: python -m uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

  # Parser Service (dev with hot reload)
  parser:
    build:
      context: ./parser
      dockerfile: Dockerfile.dev
    image: parser:dev
    container_name: parser-dev
    env_file:
      - ./parser/.env.development
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - WATCHPACK_POLLING_INTERVAL=1000
    ports:
      - "3000:3000"
    volumes:
      - ./parser:/app
      - /app/node_modules
    networks:
      - jobs_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    command: npm run start:dev

  # Client (dev with hot reload)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    image: client:dev
    container_name: client-dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - jobs_network
    restart: unless-stopped
    depends_on:
      - parser

volumes:
  postgres_data:
  redis_data:

networks:
  jobs_network:
    driver: bridge
